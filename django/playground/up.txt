‚ú≥Ô∏è üëâ üí•

üí• Fundamentals üí•
‚ú≥Ô∏è activate virtual environmetn for the project üëâ pipenv shell
‚ú≥Ô∏è start django project üëâ django-admin startproject <name> .
‚ú≥Ô∏è find the path to project's venv üëâ pipenv --venv, take this and then ctrl+shift+p -> python interpreter -> /bin/python to use this interpreter
‚ú≥Ô∏è create app üëâ python manage.py startapp <name>
‚ú≥Ô∏è in an app üëâ apps.py is config and view.py is request handler
‚ú≥Ô∏è an app should go into the installed apps list
‚ú≥Ô∏è pipenv install django-debug-toolbar

üí• Data model üí•
‚ú≥Ô∏è good model design üëâ minimal coupling - high cohesion (focus)
‚ú≥Ô∏è model classes inherit from models.Model
‚ú≥Ô∏è field types are in models.[fieldType] like models.CharField
‚ú≥Ô∏è django automatically creates an id field as PK for the model
‚ú≥Ô∏è set primary_key=True for field type parameter to change the PK for the model
‚ú≥Ô∏è create one to one relationship: set models.OneToOneField in the child model and pass the parent model as first parameter and set primary_key to True
‚ú≥Ô∏è create one to many relationship: set models.ForeignKey in the child model and pass the parent model as first parameter
‚ú≥Ô∏è creat many to many relationship: set models.ManyToManyField in one model and pass the other model as the first parameter, django will create reverse relationship in other model with [otherModel_set] like product_set, to overwrite this name use related_name parameter
‚ú≥Ô∏è circular dependency: just pass the model name as a string and set related_name='+', this tells django not to make the reverse relationship
‚ú≥Ô∏è generic relationship: content_type models.ForeignKey(ContentType), object_id = models.PositiveSmallIntegerField(), content_object = GenericForeignKey()

üí• configure django with postgres üí•
‚ú≥Ô∏è sudo apt update
‚ú≥Ô∏è sudo apt install python3-pip python3-dev libpq-dev postgresql postgresql-contrib
‚ú≥Ô∏è During the Postgres installation, an operating system user named postgres was created to correspond to the postgres PostgreSQL administrative user. You need to use this user to perform administrative tasks. You can use sudo and pass in the username with the -u option.
‚ú≥Ô∏è Log into an interactive Postgres session by typing: sudo -u postgres psql
‚ú≥Ô∏è First, you will create a database for the Django project. Each project should have its own isolated database for security reasons. We will call the database myproject in this guide, but it‚Äôs always better to select something more descriptive: CREATE DATABASE myproject;
‚ú≥Ô∏è Next, you will create a database user which you will use to connect to and interact with the database. Set the password to something strong and secure: CREATE USER myprojectuser WITH PASSWORD 'password';
‚ú≥Ô∏è You are setting the default encoding to UTF-8, which Django expects. You are also setting the default transaction isolation scheme to ‚Äúread committed‚Äù, which blocks reads from uncommitted transactions. Lastly, you are setting the timezone. By default, your Django projects will be set to use UTC. These are all recommendations from the Django project itself.
‚ú≥Ô∏è ALTER ROLE myprojectuser SET client_encoding TO 'utf8';
ALTER ROLE myprojectuser SET default_transaction_isolation TO 'read committed';
ALTER ROLE myprojectuser SET timezone TO 'UTC';
‚ú≥Ô∏è Now, all you need to do is give your database user access rights to the database you created: GRANT ALL PRIVILEGES ON DATABASE myproject TO myprojectuser;
‚ú≥Ô∏è Exit the SQL prompt to get back to the postgres user‚Äôs shell session: \q
‚ú≥Ô∏è in settings.py:
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'myproject',
        'USER': 'myprojectuser',
        'PASSWORD': 'password',
        'HOST': 'localhost',
        'PORT': '',
    }
}
‚ú≥Ô∏è While you are here, you will also need to adjust the ALLOWED_HOSTS directive. This defines a whitelist of addresses or domain names allowed to connect to the Django instance. Any incoming requests with a Host header that is not in this list will raise an exception. Django requires that you set this to prevent a certain class of security vulnerability.
# The simplest case: just add the domain name(s) and IP addresses of your Django server
# ALLOWED_HOSTS = [ 'example.com', '203.0.113.5']
# To respond to 'example.com' and any subdomains, start the domain with a dot
# ALLOWED_HOSTS = ['.example.com', '203.0.113.5']
ALLOWED_HOSTS = ['your_server_domain_or_IP']

üí• install pgAdmin4 on ubuntu üí•
‚ú≥Ô∏è https://computingforgeeks.com/how-to-install-pgadmin-4-on-ubuntu/
‚ú≥Ô∏è add the repository to our Ubuntu system
curl  -fsSL https://www.pgadmin.org/static/packages_pgadmin_org.pub | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/pgadmin.gpg
‚ú≥Ô∏è add pgAdmin repository in your Ubuntu system:
sudo sh -c 'echo "deb https://ftp.postgresql.org/pub/pgadmin/pgadmin4/apt/$(lsb_release -cs) pgadmin4 main" > /etc/apt/sources.list.d/pgadmin4.list'
‚ú≥Ô∏è You can check the contents of the repository file created using the following command:
cat /etc/apt/sources.list.d/pgadmin4.list
deb https://ftp.postgresql.org/pub/pgadmin/pgadmin4/apt/bullseye pgadmin4 main
‚ú≥Ô∏è sudo apt update
‚ú≥Ô∏è sudo apt install pgadmin4
‚ú≥Ô∏è Initiate Apache web server configuration.
sudo /usr/pgadmin4/bin/setup-web.sh0
This will require you to input pgadmin4 user email address and set the password
‚ú≥Ô∏è Open your browser and http://[ServerIP_or_domain]/pgadmin4.

üí• Setting up the database üí•
‚ú≥Ô∏è python manage.py makemigrations
‚ú≥Ô∏è python manage.py migrate
‚ú≥Ô∏è to customize database schema use class Meta: inside a model class
‚ú≥Ô∏è create empty migration: python manage.py makemigrations <app name> --empty then in operations list use migrations.RunSQL()
‚ú≥Ô∏è downgrade to a specific migration: python manage.py migrate <app name> <migration> like store 0003
‚ú≥Ô∏è mockaroo.com: to generate dummy data

üí• django ORM üí•
‚ú≥Ô∏è python manage.py runserver
‚ú≥Ô∏è ModelName.objects.all() for example returns a query_set which encapsulates some query and django will run it in certain scenarios:
1. if you iterate over the query_set
2. when it is converted into a list: list(query_set)
3. when accessing a single element or slicing it: query_set[0] or query_set[0:5]
‚ú≥Ô∏è ModelName.objects.get(pk=1) this might return an exception for example for pk=0
‚ú≥Ô∏è from django.core.exceptions import ObjectDoesNotExist
‚ú≥Ô∏è ModelName.objects.filter(pk=0).first() this returns None not an exception
‚ú≥Ô∏è to check if something exists: ModelName.objects.filter(<condition>).exists()
‚ú≥Ô∏è lookup types in django: field__gt, gte, lt, lte, range, contains, icontains, startswith, endswith, years, date, isnull
‚ú≥Ô∏è from django.db.models import Q
usage: query_set = Product.objects.filter(Q(inventory__lt=20) | Q(unit_price__lt=10))
‚ú≥Ô∏è from django.db.models import F
usage: query_set = Product.objects.filter(inventory=F('unit_price'))
‚ú≥Ô∏è sorting: Product.objects.order_by(), earliest(), latest() 
‚ú≥Ô∏è limit: Product.objects.all()[:5] or Product.objects.all()[5:10]
‚ú≥Ô∏è selecting fields to query: Product.objects.values('id', 'title', 'collection__title')
‚ú≥Ô∏è use distinct() to return a query_set with no duplicates
‚ú≥Ô∏è defering fields: only() and defer() work the same as values but instead of dictionaries they return instances of the objects so there might be extra queries to the database in certain situations
‚ú≥Ô∏è inner join: select_related() (1), prefetch_related() (n)
‚ú≥Ô∏è from django.db.models.aggregates import Count, Max, Min, Avg, Sum: Product.objects.aggregate(count=Count('id'))
‚ú≥Ô∏è Expression object in django contains Value (to set value), F (to reference fields), Func (to call db functions), Aggregate (for aggregates like sum), ExpressionWrapper (to build complex expressions)
‚ú≥Ô∏è from django.db.models import Value
‚ú≥Ô∏è Customer.objects.annotate(is_new=Value(True))
‚ú≥Ô∏è grouping: query_set = Customer.objects.annotate(orders_count=Count('order'))
‚ú≥Ô∏è querying generic relationships: from django.contrib.contenttypes.models import ContentType
content_type = ContentType.objects.get_for_model(Product)
TaggedItem.objects.select_related('tag').filter(content_type=content_type, object_id=<someId>)
‚ú≥Ô∏è you can set custom manager for a model, this is a method you can access from the model manager i.e. Product.objects.customManager
‚ú≥Ô∏è querySet cach happens only when you list the querySet first i.e. list(querySet) and then querySet[0] and not the other way around
‚ú≥Ô∏è inset operation: collection = Collection() ... collection.save() or using kwarg we can use Collection.objects.create() but we lose intellisense
‚ú≥Ô∏è update: Collection.objects.get(pk=11) then update specific fields and then .save() or Collection.objects.filter(pk=11).update(**kwarg), the first approach is robust due to automatically update when some field names change but it has a performance penalty for reading from the db first, but the second approach update directly in db but because it is using kwarg it wont automatically update
‚ú≥Ô∏è delete: collection.delete(), bulk delete: Collection.objects.filter(id__gt=5).delete()
‚ú≥Ô∏è atomic operation: all changes must be done together and if something fails, all changes must be roll backed, to achieve this we can use transaction decoration for a function
from django.db import transaction
@transaction.atomic()
def create_order(request):
or if you want for a part of the code to be wrapped in a transaction you can use with transaction.atomic(): inside the function body
‚ú≥Ô∏è execute raw sql quries: Product.objects.raw('SELECT * FROM store_product) or
from django.db import connection
cursor = connection.cursor()
cursor.execute('raw query')
cursor.close() or
with connection.cursor() as cursor:
    cursor.execute() or use a stored procedure like:
with connection.cursor() as cursor:
    cursor.callproc('get_customers', [1, 2])

üí• the admin site üí•
‚ú≥Ô∏è setup admin site: python manage.py createsuperuser -> python manage.py migrate
‚ú≥Ô∏è forget admin password: python manage.py changepassword <username of the superuser>
‚ú≥Ô∏è
‚ú≥Ô∏è
‚ú≥Ô∏è
‚ú≥Ô∏è
‚ú≥Ô∏è
‚ú≥Ô∏è
‚ú≥Ô∏è
‚ú≥Ô∏è